{%- if production.event.repository -%}
{%- assign repo_dir = production.event.repository.directory -%}
{%- else -%}
{%- assign repo_dir = "." -%}
{%- endif -%}
{%- if production.meta['likelihood'] contains "calibration" -%}
{%- assign calibration_on = production.meta['likelihood']['calibration']['sample'] -%}
{%- else -%}
{%- assign calibration_on = True %}
{%- endif -%}
{%- assign meta = production.meta -%}
{%- assign sampler = production.meta['sampler'] -%}
{%- assign scheduler = production.meta['scheduler'] -%}
{%- assign likelihood = production.meta['likelihood'] -%}
{%- assign priors = production.meta['priors'] -%}
{%- assign data = production.meta['data'] -%}
{%- assign quality = production.meta['quality'] -%}
{%- assign ifos = production.meta['interferometers'] -%}

{%- if data contains "calibration" %}
{%- if calibration_on %}
{%- if data['calibration'] contains ifos[0] %}
################################################################################
## Calibration arguments
################################################################################
calibration-model=CubicSpline
spline-calibration-envelope-dict={ {% for ifo in ifos %}{{ifo}}:{{data['calibration'][ifo]}},{% endfor %} }
spline-calibration-nodes=10
spline-calibration-amplitude-uncertainty-dict=None
spline-calibration-phase-uncertainty-dict=None
{%- if priors contains 'calibration' %}
calibration-prior-boundary={{ priors['calibration']['boundary'] | default: reflective }}
{%- endif %}
{%- endif %}
{%- endif %}
{%- endif %}

################################################################################
## Data generation arguments
################################################################################

ignore-gwpy-data-quality-check=True
gps-tuple=None
gps-file=None
timeslide-file=None
timeslide-dict=None
trigger-time={{ production.meta['event time'] }}
gaussian-noise=False
n-simulation=0
data-dict={ {% if data['data files'].size > 0 %} {% for ifo in ifos %}{{ifo}}:{{data['data files'][ifo]}},{% endfor %} {% endif %} }
data-format=None
channel-dict={ {% for ifo in ifos %}{{data['channels'][ifo]}},{% endfor %} }

################################################################################
## Detector arguments
################################################################################

coherence-test={{ likelihood['coherence test'] | default: "False" }}
detectors={{ ifos }}
duration={{ data['segment length'] }}
generation-seed=42
psd-dict={ {% for ifo in ifos %}{{ifo}}:{{production.psds[ifo]}},{% endfor %} }
psd-fractional-overlap=0.5
post-trigger-duration=2.0
sampling-frequency={{ likelihood['sample rate'] | round }}
psd-length={{ likelihood['psd length'] | round }}
psd-maximum-duration=1024
psd-method=median
psd-start-time=None
minimum-frequency={ {% for ifo in ifos %}{{ifo}}:{{quality['minimum frequency'][ifo]}},{% endfor %}{% if likelihood contains 'start frequency'%} waveform: {{ likelihood['start frequency'] }} {% endif %} }
maximum-frequency={ {% for ifo in ifos %}{{ifo}}:{{quality['maximum frequency'][ifo]}},{% endfor %} }
zero-noise=False
tukey-roll-off=0.4
resampling-method=lal

################################################################################
## Injection arguments
################################################################################

injection=False
injection-dict=None
injection-file=None
injection-numbers=None
injection-waveform-approximant=None

################################################################################
## Job submission arguments
################################################################################

{%- if scheduler contains "accounting group" %}
accounting={{ scheduler['accounting group'] }}
accounting_user = {{ config['condor']['user'] }}
{%- else %}
accounting=not.required.here
accounting_user = {{ config['condor']['user'] }}
{%- endif %}
label={{ production.name }}
local=False
local-generation={{ scheduler['local generation'] | default: False }}
local-plot=False
outdir={{ production.rundir }}
periodic-restart-time={{ scheduler['periodic restart time'] | default: 28800 }}
request-memory={{ scheduler['request memory'] | default: 4.0}}
request-memory-generation={{ scheduler['request generation memory'] | default: None }}
request-cpus={{ scheduler['request cpus'] | default: 1 }}
request-disk={{ scheduler['request disk'] | default: 1 }}
scheduler={{ scheduler['type'] | default: "condor" }}
scheduler-args=None
scheduler-module=None
scheduler-env=None
transfer-files={% if scheduler['osg'] %}True{% else %}{{ scheduler['transfer files'] | default: True }}{% endif %}
log-directory=None
online-pe=False
osg={{ scheduler['osg'] | default: False }}
desired-sites={{ scheduler['desired sites'] | default: None }}

################################################################################
## Likelihood arguments
################################################################################

distance-marginalization={{ likelihood['marginalization']['distance'] | default: "True" }}
{% assign lookup_default = repo_dir+"/C01_offline/"+production.name+".TD.npz" -%}
distance-marginalization-lookup-table={{ likelihood['marginalization']['distance lookup'] | default: lookup_default }}
phase-marginalization={{ likelihood['marginalization']['phase'] | default: "False" }}
time-marginalization={{ likelihood['marginalization']['time'] | default: "False" }}
calibration-marginalization={{ likelihood['marginalization']['calibration'] | default: "False" }}
jitter-time=True
time-reference={{ likelihood['time reference'] | default: "geocent" }}
reference-frame={% if production.meta['interferometers'] contains "H1" %}H1{% endif %}{% if production.meta['interferometers'] contains "L1" %}L1{% endif %}{% if production.meta['interferometers'] contains "V1" %}V1{% endif %}

likelihood-type={{ likelihood['type'] | default: "GravitationalWaveTransient" }}

{%- if likelihood contains "roq" %}
roq-folder={{ likelihood['roq']['folder'] | default: "None" }}
roq-weights={{ likelihood['roq']['weights'] | default: "None" }}
roq-weight-format={{ likelihood['roq']['weight format'] | default: "None" }}
roq-scale-factor={{ likelihood['roq']['scale'] | default: 1 }}
roq-linear-matrix={{ likelihood['roq']['linear matrix'] }}
roq-quadratic-matrix={{ likelihood['roq']['quadratic matrix'] }}
{%- endif %}

{%- if likelihood contains "relative binning" %}
fiducial-parameters={{ likelihood['relative binning']['fiducial parameters'] | default: None }}
update-fiducial-parameters={{ likelihood['relative binning']['update fiducial parameters'] | default: False }}
epsilon={{ likelihood['relative binning']['epsilon'] | default: 0.025 }}
{%- endif %}

extra-likelihood-kwargs={{ likelihood['kwargs'] | default: "None" }}

################################################################################
## Output arguments
################################################################################

plot-calibration=False
plot-corner=False
plot-marginal=False
plot-skymap=False
plot-waveform=False
plot-format=png
create-summary=False
email=None
existing-dir=None
webdir={{ config['general']['webroot'] }}/{{ production.event.name }}/{{ production.name }}
summarypages-arguments=None
result-format=hdf5
final-result=True
final-result-nsamples=20000

################################################################################
## Executables
################################################################################
analysis-executable={{ config['pipelines']['environment'] }}/bin/bilby_pipe_analysis


################################################################################
## Prior arguments
################################################################################

default-prior = {{ priors['default'] | default: "BBHPriorDict" }}
deltaT=0.2
{% if production.meta contains "priors" %}
prior-dict = {
{%- if priors.keys() contains "geocentric time" %}
{%- assign p = priors['geocentric time'] %}
   geocent_time = {{p['type']}}(name="geocent_time", minimum={{p['minimum']}}, maximum={{p['maximum']}}, boundary={{p['boundary'] | default: None}}),
{% endif %}
{%- if priors.keys() contains "chirp mass" %}{% assign p = priors['chirp mass'] %}{% else %}{% assign p = None %}{% endif %}
   chirp_mass = {{p['type'] | default: "bilby.gw.prior.UniformInComponentsChirpMass" }}(name='chirp_mass', minimum={{p['minimum'] | default: 1}}, maximum={{p['maximum'] | default: 100}}, unit='$M_\{\{\odot\}\}$'),
{%- if priors.keys() contains "mass ratio" %}{% assign p = priors['mass ratio'] %}{% else %}{% assign p = None %}{% endif %}
   mass_ratio = {{p['type'] | default: "bilby.gw.prior.UniformInComponentsMassRatio" }}(name='mass_ratio', minimum={{p['minimum']}}, maximum={{p['maximum']}}),
{%- if priors.keys() contains "total mass" %}{% assign p = priors['total mass'] %}
   total_mass = {{p['type'] | default: Constraint}}(name='total_mass', minimum={{p['minimum']}}, maximum={{p['maximum']}}),{% endif %}
{%- if priors.keys() contains "mass 1" %}{% assign p = priors['mass 1'] %}{% else %}{% assign p = None %}{% endif %}
   mass_1 = {{p['type'] | default: Constraint}}(name='mass_1', minimum={{p['minimum'] | default: 1}}, maximum={{p['maximum'] | default: 1000}}),
{%- if priors.keys() contains "mass 2" %}{% assign p = priors['mass 2'] %}{% else %}{% assign p = None %}{% endif %}
   mass_2 = {{p['type'] | default: Constraint}}(name='mass_2', minimum={{p['minimum'] | default: 1 }}, maximum={{p['maximum'] | default: 1000}}),
{%- if priors.keys() contains "spin 1" %}
{%- assign p = priors['spin 1'] %}
{%- else %}
{%- assign p = None %}
{% endif %}
   a_1 = {{ p['type'] | default: Uniform}}(name='a_1', minimum={{ p['minimum'] | default: 0}}, maximum={{ p['maximum'] | default: 0.99}}),
{%- if priors.keys() contains "spin 2" %}
{%- assign p = priors['spin 2'] %}
{%- else %}
{%- assign p = None %}
{%- endif %}
   a_2 = {{ p['type'] | default: Uniform}}(name='a_2', minimum={{ p['minimum'] | default: 0}}, maximum={{ p['maximum'] | default: 0.99}}),
{%- if priors.keys() contains "tilt 1" %}{% assign p = priors['tilt 1'] %}{% else %}{% assign p = None %}{% endif %}
   tilt_1 = {{ p['type'] | default: Sine}}(name='tilt_1'),
{%- if priors.keys() contains "tilt 2" %}{% assign p = priors['tilt 2'] %}{% else %}{% assign p = None %}{% endif %}
   tilt_2 = {{ p['type'] | default: Sine}}(name='tilt_2'),
{%- if priors.keys() contains "phi 12" %}{% assign p = priors['phi 12'] %}{% else %}{% assign p = None %}{% endif %}
   phi_12 = {{ p['type'] | default: Uniform}}(name='phi_12', minimum={{ p['minimum'] | default: 0}}, maximum={{ p['maximum'] | default: "2 * np.pi"}}, boundary={{p['boundary'] | default: "'periodic'"}}),
{%- if priors.keys() contains "phi jl" %}{% assign p = priors['phi jl'] %}{% else %}{% assign p = None %}{% endif %}
   phi_jl = {{ p['type'] | default: Uniform}}(name='phi_jl', minimum={{ p['minimum'] | default: 0}}, maximum={{ p['maximum'] | default: "2 * np.pi"}}, boundary={{p['boundary'] | default: "'periodic'"}}),
{%- if priors.keys() contains "lambda 1" %}
{%- assign p = priors['lambda 1'] %}
   lambda_1 = Uniform(name='lambda_1', minimum={{ p['minimum'] | default: 0}}, maximum={{ p['maximum'] | default: 5000}}),
{%- endif %}
{%- if priors.keys() contains "lambda 2" %}{% assign p = priors['lambda 2'] %}
   lambda_2 = Uniform(name='lambda_2', minimum={{ p['minimum'] | default: 0}}, maximum={{ p['maximum'] | default: 5000}}),
{%- endif %}
{%- if priors.keys() contains "luminosity distance" %}
{%- assign p = priors['luminosity distance'] %}
   luminosity_distance =  {{ p['type'] | default: PowerLaw}}(name='luminosity_distance', {% for key in p.keys() %}{% if key != "type" %}{{key | replace: " ", "_"}}={{p[key]}},{% endif %} {% endfor %} unit='Mpc'),
{%- else %}
{%- assign p = None %}
   luminosity_distance =  {{ p['type'] | default: PowerLaw}}(name='luminosity_distance', unit='Mpc'),
{%- endif %}
   dec = Cosine(name='dec'),
   ra = Uniform(name='ra', minimum=0, maximum=2 * np.pi, boundary='periodic'),
   theta_jn = Sine(name='theta_jn'),
   psi = Uniform(name='psi', minimum=0, maximum=np.pi, boundary='periodic'),
   phase = Uniform(name='phase', minimum=0, maximum=2 * np.pi, boundary='periodic')}
{% endif %}
enforce-signal-duration={{ production.meta['waveform']['enforce signal duration'] | default: False }}

################################################################################
## Post processing arguments
################################################################################

postprocessing-executable=None
postprocessing-arguments=None
single-postprocessing-executable=None
single-postprocessing-arguments=None

################################################################################
## Sampler arguments
################################################################################

sampler={{sampler['sampler'] | default: "dynesty" }}
sampling-seed={{sampler['seed'] | default: 1 }}
n-parallel={{ sampler['parallel jobs'] | default: 2 }}
sampler-kwargs={{ sampler['sampler kwargs'] |  default: "{'nlive': 1000, 'naccept': 60, 'check_point_plot': True, 'check_point_delta_t': 1800, 'print_method': 'interval-60', 'sample': 'acceptance-walk'}"  }} 

################################################################################
## Waveform arguments
################################################################################

waveform-generator={{ production.meta['waveform']['generator'] | default: "bilby.gw.waveform_generator.LALCBCWaveformGenerator" }}
reference-frequency={{ production.meta['waveform']['reference frequency'] }}
waveform-approximant={{ production.meta['waveform']['approximant'] }}
catch-waveform-errors=True
pn-spin-order={{ production.meta['waveform']['pn spin order'] | default: -1 }}
pn-tidal-order={{ production.meta['waveform']['pn tidal order'] | default: -1 }}
pn-phase-order={{ production.meta['waveform']['pn phase order'] | default: -1 }}
pn-amplitude-order={{ production.meta['waveform']['pn amplitude order'] | default: 0 }}
numerical-relativity-file={{ production.meta['waveform']['file'] | default: "None" }}
waveform-arguments-dict={{ production.meta['waveform']['arguments'] | default: "None" }}
mode-array={{ production.meta['waveform']['mode array'] | default: "None" }}
frequency-domain-source-model={{ production.meta['likelihood']['frequency domain source model'] | default: "lal_binary_black_hole" }}
conversion-function={{ production.meta['waveform']['conversion function'] | default: "None" }}
generation-function={{ production.meta['waveform']['generation function'] | default: "None" }}
